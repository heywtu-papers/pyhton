from sklearn.ensemble import RandomForestRegressor,RandomForestClassifier
from IPython.display import display
from sklearn import metrics

import numpy as np
import pandas as pd
import math
import os 

PATH = 'data/bulldozers/'
df = pd.read_csv(f'{PATH}Train.csv',low_memory=False,parse_dates=['saledate'])

def fix_missing(df,col,name,nan_dict,is_train):
  if is_train:
    if is_numeric_dtype(col):
      if pd.isnull(col).sum():
        df[name+'_na'] = pd.isnull(col)
        nan_dict[name] = col.median()
        df[name]= col.fillna(nan_dict[name])
  else:
    if is_numeric_dtype(col):
      if name in nan_dict:
        df[name+'_na'] = pd.isnull(col)
        df[name]=col.fillna(nan_dict[name])

      else:
        df[name]=col.fillna(df[name].median())

def numericalize(df,col,name):
  if not is_numeric_dtype(col):
      df[name] = col.cat.codes+1

def proc_df(df,y_fld,nan_dict=None,is_train=True):
  df = df.copy()
  y = df[y_fld].values

  df.drop(y_fld,axis=1,inplace=True)

  if nan_dict is None:
    nan_dict={}
  
  for n ,c in df.items():
    fix_missing(df,c,n,nan_dict,is_train)
    numericalize(df,c,n)

  if is_train:
    return df,y,nan_dict

  return df,y

def split_train_val(df,n):
  return df[:n].copy(),df[n:].copy()

n_valid = 12000
n_train = len(df)-n_valid
raw_train,raw_valid=split_train_val(df,n_train)

x_train,y_train,nas=proc_df(raw_train,'SalePrice')
x_valid,y_valid=proc_df(raw_valid,'SalePrice',nan_dict=nas,is_train=False)


m = RandomForestRegressor(n_estimators=100,oob_score=True,max_features=0.5,min_samples_leaf=5,n_jobs=-1)
m.fit(x_train,y_train)
m.score(x_train,y_train)

def rmse(x,y):
  return math.sqrt(((x-y)**2).mean())

def print_score(m):
  print(f'RMSE of train set{rmse(m.predict(x_train),y_train)}')
  print(f'RMSE of validation set{rmse(m.predict(x_valid),y_valid)}')
  print(f'R^2 of train set{rmse(m.predict(x_train),y_train)}')
  print(f'R^2 of validation set{rmse(m.predict(x_valid),y_valid)}')
  
print_score(m)

'''

m = RandomForestRegressor(n_estimators=40,n_jobs=-1)
m.fit()
print_score(m)

######

m = RandomForestRegressor(n_estimators=70,min_samples_leaf=5,max_features=0.5,oob_secure=True,n_jobs=-1)
m.fit(x_train,_y_train)
print_score(m)
'''
